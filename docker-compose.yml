version: '3'

volumes:
  prometheus-data:
  grafana-data:
  loki-data:

networks:
  monitoring:
    driver: bridge

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
    restart: unless-stopped
    environment:
      - BACTOCLOUD_USERNAME=${BACTOCLOUD_USERNAME}
      - BACTOCLOUD_PASSWORD=${BACTOCLOUD_PASSWORD}
      - BACTOCLOUD_HOST=${BACTOCLOUD_HOST}
      - BACTOCLOUD_PORT=${BACTOCLOUD_PORT}
    entrypoint:
      - /bin/sh
      - -c
      - |
        mkdir -p /etc/prometheus
        cat > /etc/prometheus/prometheus.yml << EOL
        global:
          scrape_interval: 15s
          evaluation_interval: 15s

        scrape_configs:
          - job_name: "prometheus"
            static_configs:
              - targets: ["localhost:9090"]

          - job_name: "node_exporter"
            static_configs:
              - targets: ["node_exporter:9100"]

          - job_name: "cadvisor"
            static_configs:
              - targets: ["cadvisor:8080"]
              
          - job_name: "bactocloud"
            basic_auth:
              username: "${BACTOCLOUD_USERNAME}"
              password: "${BACTOCLOUD_PASSWORD}"
            static_configs:
              - targets: ["${BACTOCLOUD_HOST}:${BACTOCLOUD_PORT}"]
            metrics_path: "/metrics"
        EOL
        
        /bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --web.listen-address=0.0.0.0:9090
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-loki-datasource
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/dashboards/default.json
    restart: unless-stopped
    user: "472" # Use the UID that Grafana normally runs as
    entrypoint:
      - /bin/bash
      - -c
      - |
        # Create necessary directories with proper permissions
        mkdir -p /etc/grafana/provisioning/datasources
        mkdir -p /etc/grafana/dashboards
        
        # Configure datasources
        cat > /etc/grafana/provisioning/datasources/datasource.yml << 'EOL'
        apiVersion: 1

        datasources:
          - name: Prometheus
            type: prometheus
            access: proxy
            url: http://prometheus:9090
            isDefault: true
            editable: true
          
          - name: Loki
            type: loki
            access: proxy
            url: http://loki:3100
            editable: true
        EOL
        
        # Configure default dashboard
        cat > /etc/grafana/dashboards/default.json << 'EOL'
        {
          "annotations": {
            "list": []
          },
          "editable": true,
          "gnetId": null,
          "graphTooltip": 0,
          "links": [],
          "panels": [
            {
              "datasource": "Prometheus",
              "description": "System load average",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 10,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": false
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 0
              },
              "id": 1,
              "options": {
                "legend": {
                  "calcs": [],
                  "displayMode": "list",
                  "placement": "bottom"
                },
                "tooltip": {
                  "mode": "single"
                }
              },
              "pluginVersion": "8.0.0",
              "targets": [
                {
                  "exemplar": true,
                  "expr": "node_load1",
                  "interval": "",
                  "legendFormat": "1m",
                  "refId": "A"
                },
                {
                  "exemplar": true,
                  "expr": "node_load5",
                  "interval": "",
                  "legendFormat": "5m",
                  "refId": "B"
                },
                {
                  "exemplar": true,
                  "expr": "node_load15",
                  "interval": "",
                  "legendFormat": "15m",
                  "refId": "C"
                }
              ],
              "title": "System Load Average",
              "type": "timeseries"
            }
          ],
          "refresh": "5s",
          "schemaVersion": 30,
          "style": "dark",
          "tags": [],
          "templating": {
            "list": []
          },
          "time": {
            "from": "now-1h",
            "to": "now"
          },
          "timepicker": {},
          "timezone": "",
          "title": "Default Dashboard",
          "version": 1
        }
        EOL
        
        # Start Grafana directly
        /run.sh
    networks:
      - monitoring

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml -config.expand-env=true
    restart: unless-stopped
    entrypoint:
      - /bin/sh
      - -c
      - |
        mkdir -p /etc/loki
        cat > /etc/loki/local-config.yaml << 'EOL'
        auth_enabled: false

        server:
          http_listen_port: 3100
          grpc_listen_port: 9096
          http_server_read_timeout: 1m
          http_server_write_timeout: 1m
          log_level: info

        common:
          path_prefix: /loki
          storage:
            filesystem:
              chunks_directory: /loki/chunks
              rules_directory: /loki/rules
          replication_factor: 1
          ring:
            kvstore:
              store: inmemory

        query_range:
          results_cache:
            cache:
              embedded_cache:
                enabled: true
                max_size_mb: 100

        schema_config:
          configs:
            - from: 2020-10-24
              store: boltdb-shipper
              object_store: filesystem
              schema: v13
              index:
                prefix: index_
                period: 24h

        ruler:
          alertmanager_url: http://localhost:9093

        limits_config:
          retention_period: 72h
          ingestion_rate_mb: 30
          ingestion_burst_size_mb: 60
          allow_structured_metadata: false

        analytics:
          reporting_enabled: false
        EOL
        
        /usr/bin/loki -config.file=/etc/loki/local-config.yaml -config.expand-env=true -validation.allow-structured-metadata=false
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml -config.expand-env=true
    depends_on:
      - loki
    restart: unless-stopped
    entrypoint:
      - /bin/sh
      - -c
      - |
        mkdir -p /etc/promtail
        cat > /etc/promtail/config.yml << EOL
        server:
          http_listen_port: 9080
          grpc_listen_port: 0

        positions:
          filename: /tmp/positions.yaml

        clients:
          - url: http://loki:3100/loki/api/v1/push

        scrape_configs:
          # For logs from local Docker containers
          - job_name: docker
            static_configs:
              - targets:
                  - localhost
                labels:
                  job: docker
                  __path__: /var/lib/docker/containers/*/*log

          # For logs from local system
          - job_name: system
            static_configs:
              - targets:
                  - localhost
                labels:
                  job: syslog
                  __path__: /var/log/syslog
        EOL
        
        /usr/bin/promtail -config.file=/etc/promtail/config.yml -config.expand-env=true
    networks:
      - monitoring
    ports:
      - "9080:9080"

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - monitoring

  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    restart: unless-stopped
    networks:
      - monitoring